// Generated by Selenium IDE
import com.example.newww.*;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class SeleniumTest {
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;
    @Before
    public void setUp() throws IOException, InterruptedException {
        System.setProperty("webdriver.gecko.driver", "/home/tashrif/Downloads/geckodriver-v0.36.0-linux64/geckodriver"); // use \\ in Windows
        driver = new FirefoxDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }
    private void runShellCommand(String command) throws IOException, InterruptedException {
        ProcessBuilder builder = new ProcessBuilder("bash", "-c", command);
        builder.redirectErrorStream(true);
        Process process = builder.start();

        // Optional: read the output (for debugging)
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }

        int exitCode = process.waitFor();
        if (exitCode != 0) {
            throw new RuntimeException("Failed to execute: " + command);
        }
    }
    @After
    public void tearDown() {
        driver.quit();
    }
    @Test
    public void testCreateBoardAfterSignIn() {
        driver.manage().window().setSize(new Dimension(550, 695));

        HomePage homePage = new HomePage(driver);
        testSignInWithValidCredential();
        homePage.clickAddNewBoard();
        homePage.enterBoardNameAndSubmit("test1");
        homePage.signOut();
    }
    @Test
    public void testSignInWithValidCredential() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();
    }
    @Test
    public void giveWrongPassword() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.signIn("tashrifpro@gmail.com", "123456");
        assertThat(signInPage.getErrorMessage(), is("Invalid email or password"));
    }
    @Test
    public void emailEmptySignIn() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.signIn("", "1234567");
    }
    @Test
    public void emailPasswordSignIn() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.signIn("john@phoenix-trello.com", "");
    }
    @Test
    public void duplicate() {
        driver.get("http://localhost:4000/sign_up");
        SignUpPage signUpPage = new SignUpPage(driver);
        signUpPage.enterFirstName("tashrif");
        signUpPage.enterLastName("prottasha");
        signUpPage.enterEmail("tashrifpro@gmail.com");
        signUpPage.enterPassword("1234567");
        signUpPage.confirmPassword("1234567");
        signUpPage.clickSignUpButton();
        assertThat(signUpPage.checkDuplicateText(), is("Email already taken"));
    }
    @Test
    public void signOut() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();
        HomePage homePage = new HomePage(driver);
        homePage.signOut();
    }
    @Test
    public void createNewUserSignUp() {
        driver.get("http://localhost:4000/sign_up");
        driver.manage().window().setSize(new Dimension(550, 698));
        SignUpPage signUpPage = new SignUpPage(driver);
        signUpPage.enterFirstName("tashrif");
        signUpPage.enterLastName("prottasha");
        signUpPage.enterPassword("1234567");
        signUpPage.confirmPassword("1234567");
        signUpPage.clickSignUpButton();
    }
    @Test
    public void signUpEmptyAll() {
        driver.get("http://localhost:4000/sign_up");
        driver.manage().window().setSize(new Dimension(550, 698));
        SignUpPage signUpPage = new SignUpPage(driver);
        signUpPage.enterFirstName("");
        signUpPage.enterLastName("");
        signUpPage.enterPassword("");
        signUpPage.confirmPassword("");
        signUpPage.clickSignUpButton();
    }
    @Test
    public void testCreatingListAndMatching() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.open();
        signInPage.clickSignInButton();

        HomePage homePage = new HomePage(driver);
        homePage.clickAddNewBoard();
        homePage.enterBoardNameAndSubmit("board");
        homePage.openBoard();

        ListPage listPage = new ListPage(driver);
        listPage.enterListName("list1");
        listPage.clickCreateListButton();

        String listTitle = listPage.getFirstListTitle();
        assertThat(listTitle, is("list1"));
    }
    @Test
    public void createBoardListAndCardWithDescription() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.open();
        signInPage.clickSignInButton();

        HomePage homePage = new HomePage(driver);
        homePage.clickAddNewBoard();
        homePage.enterBoardNameAndSubmit("board3");
        homePage.openBoard();

        ListPage listPage = new ListPage(driver);
        listPage.enterListName("list3");
        listPage.clickCreateListButton();

        CardPage cardPage = new CardPage(driver);
        cardPage.clickAddCardLink();
        cardPage.enterCardName("card3");
        cardPage.submitCard();

        cardPage.clickCardContent();
        cardPage.enterCardDescription("nice");
        cardPage.saveCardDescription();
    }

    @Test
    public void createAndDeleteList() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.open();
        signInPage.clickSignInButton();

        HomePage homePage = new HomePage(driver);
        homePage.clickAddNewBoard();
        homePage.enterBoardNameAndSubmit("board56");
        homePage.openBoard();

        ListPage listPage = new ListPage(driver);
        listPage.enterListName("list7");
        listPage.clickCreateListButton();

        CardPage cardPage = new CardPage(driver);
        cardPage.clickAddCardLink();
        cardPage.enterCardName("card9");
        cardPage.submitCard();
        cardPage.clickCardContent();
        cardPage.clickDeleteCardButton();
    }

    @Test
    public void editCardInBoardWithTitle() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.open();
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        boardPage.openBoardById("1-board56");

        CardPage cardPage = new CardPage(driver);
        cardPage.clickCardContent();
        cardPage.clickEditCard();
        cardPage.setCardTitle("card56");
        cardPage.setCardDescription("hello");
        cardPage.saveCardChanges();
    }
    @Test
    public void addCollaborator() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        HomePage homePage = new HomePage(driver);
        homePage.clickAddNewBoard();
        homePage.enterBoardNameAndSubmit("board35");
        homePage.openBoard();


        driver.findElement(By.cssSelector("li > .add-new")).click();
        driver.findElement(By.id("crawljax_member_email")).click();
        driver.findElement(By.id("crawljax_member_email")).sendKeys("tashrifpro@gmail.com");
        driver.findElement(By.cssSelector("button")).click();
    }
    @Test
    public void updateList() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        driver.findElement(By.cssSelector("#\\34-board35 > .inner")).click();
        boardPage.clickUpdateName();
        boardPage.enterListName("listupdated");
        boardPage.clickUpdate();
        assertThat(boardPage.checkUpdatedName(), is("listupdated"));
    }
    @Test
    public void addComment() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        boardPage.openBoardById("1-board1");

        CardPage cardPage = new CardPage(driver);
        cardPage.clickCardContent();
        cardPage.addComment("comment1");

        assertThat(cardPage.getCommentText(), is("comment1"));
    }

    @Test
    public void addTag() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        boardPage.openBoardById("1-board1");

        CardPage cardPage = new CardPage(driver);
        cardPage.selectTag();
        cardPage.clickTagColor();
    }
    @Test
    public void addMember() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        boardPage.openBoardById("1-board1");

        CardPage cardPage = new CardPage(driver);
        cardPage.clickCardContent();
        cardPage.openOptionsMenu();
        cardPage.clickSecondMemberInList();

        assertTrue(cardPage.hasCardMembers());
    }
    @Test
    public void memberExistsInAddMember() {
        SignInPage signInPage = new SignInPage(driver);
        signInPage.clickSignInButton();

        BoardPage boardPage = new BoardPage(driver);
        boardPage.openBoardById("1-board1");
        boardPage.addCollaboratorByEmail("sami@gmail.com");
        assertThat(boardPage.getCollaboratorErrorMessage(), is("User does not exist"));
    }
    @Test
    public void passwordLessThanFive() {
        driver.get("http://localhost:4000/sign_up");
        SignUpPage signUpPage = new SignUpPage(driver);
        signUpPage.enterFirstName("tashrif");
        signUpPage.enterLastName("prottasha");
        signUpPage.enterEmail("tashrifpro@gmail.com");
        signUpPage.enterPassword("1234");
        signUpPage.confirmPassword("1234");
        signUpPage.clickSignUpButton();
        assertThat(signUpPage.getPasswordErrorText(), is("should be at least 5 character(s)"));
    }
}